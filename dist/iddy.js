var Iddy=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";t.__esModule=!0;var r=n(1);t.Authentication=r.default},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(u,a)}c((r=r.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0;var i="iddy.user",u="iddy.isAuthenticated",a=function(e){var t=this;this.init=function(e){e.domain?t.domain="https://"+e.domain||!1:t.domain=""},this.getUser=function(){return r(t,void 0,void 0,function(){var e,t;return o(this,function(n){switch(n.label){case 0:return(e=(e=null)?JSON.parse(e):null)?[3,4]:[4,fetch(this.domain+"/api/me",{mode:"cors",credentials:"include"})];case 1:return(t=n.sent()).ok?[4,t.json()]:[3,3];case 2:return e=n.sent(),localStorage.setItem(i,JSON.stringify(e)),localStorage.setItem(u,"true"),[3,4];case 3:e=null,n.label=4;case 4:return[2,e]}})})},this.isAuthenticated=function(){return r(t,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,this.getUser()];case 1:return[2,!!e.sent()]}})})},this.loginWithRedirect=function(e){var n=e.redirectUri;window.location.href=t.domain+"/login?redirectUri="+encodeURIComponent(n)},this.logout=function(e){var n=e.returnTo;return r(t,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return localStorage.removeItem(i),localStorage.removeItem(u),[4,fetch(this.domain+"/api/logout",{mode:"cors",credentials:"include"})];case 1:return[4,e.sent().json()];case 2:return e.sent(),window.location.href=n,[2]}})})},e.domain?this.domain="https://"+e.domain||!1:this.domain=""};t.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
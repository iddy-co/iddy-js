var Iddy=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(u,a)}c((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this;e.__esModule=!0;var u=n(1),a=n(2);e.Authentication=a.default;e.createIddyClient=function(t){return r(i,void 0,void 0,function(){return o(this,function(e){return console.log("test = createIddyClient"),[2,new u.default(t)]})})};e.functionA=function(){console.log("functionA - OK 3")};e.functionB=function(){console.log("functionB - OK 3")}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(u,a)}c((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};e.__esModule=!0;var i="iddy.user",u="iddy.isAuthenticated",a=function(t){var e=this;this.init=function(t){t.domain?e.domain="https://"+t.domain||!1:e.domain=""},this.getUser=function(){return r(e,void 0,void 0,function(){var t,e;return o(this,function(n){switch(n.label){case 0:return(t=(t=null)?JSON.parse(t):null)?[3,4]:[4,fetch(this.domain+"/api/me",{mode:"cors",credentials:"include"})];case 1:return(e=n.sent()).ok?[4,e.json()]:[3,3];case 2:return t=n.sent(),localStorage.setItem(i,JSON.stringify(t)),localStorage.setItem(u,"true"),[3,4];case 3:t=null,n.label=4;case 4:return[2,t]}})})},this.isAuthenticated=function(){return r(e,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return[4,this.getUser()];case 1:return[2,!!t.sent()]}})})},this.loginWithRedirect=function(t){var n=t.redirectUri;window.location.href=e.domain+"/login?redirectUri="+encodeURIComponent(n)},this.logout=function(t){var n=t.returnTo;return r(e,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return localStorage.removeItem(i),localStorage.removeItem(u),[4,fetch(this.domain+"/api/logout",{mode:"cors",credentials:"include"})];case 1:return[4,t.sent().json()];case 2:return t.sent(),window.location.href=n,[2]}})})},t.domain?this.domain="https://"+t.domain||!1:this.domain=""};e.default=a},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(u,a)}c((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};e.__esModule=!0;var i="iddy.user",u="iddy.isAuthenticated",a=function(t){var e=this;this.init=function(t){t.domain?e.domain="https://"+t.domain||!1:e.domain=""},this.getUser=function(){return r(e,void 0,void 0,function(){var t,e;return o(this,function(n){switch(n.label){case 0:return(t=(t=null)?JSON.parse(t):null)?[3,4]:[4,fetch(this.domain+"/api/me",{mode:"cors",credentials:"include"})];case 1:return(e=n.sent()).ok?[4,e.json()]:[3,3];case 2:return t=n.sent(),localStorage.setItem(i,JSON.stringify(t)),localStorage.setItem(u,"true"),[3,4];case 3:t=null,n.label=4;case 4:return[2,t]}})})},this.isAuthenticated=function(){return r(e,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return[4,this.getUser()];case 1:return[2,!!t.sent()]}})})},this.loginWithRedirect=function(t){var n=t.redirectUri;window.location.href=e.domain+"/login?redirectUri="+encodeURIComponent(n)},this.logout=function(t){var n=t.returnTo;return r(e,void 0,void 0,function(){return o(this,function(t){switch(t.label){case 0:return localStorage.removeItem(i),localStorage.removeItem(u),[4,fetch(this.domain+"/api/logout",{mode:"cors",credentials:"include"})];case 1:return[4,t.sent().json()];case 2:return t.sent(),window.location.href=n,[2]}})})},t.domain?this.domain="https://"+t.domain||!1:this.domain=""};e.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,